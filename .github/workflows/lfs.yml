name: lfs
run-name: +${{ github.event.inputs.storage }}GB x ${{ github.event.inputs.storage_times }}, ${{ github.event.inputs.bandwidth_times }}x checkout
on:
  workflow_dispatch:
    inputs:
      storage:
        description: File size in GBs
        default: "1"
        required: true
      storage_times:
        description: How many files to generate?
        default: "0"
        required: true        
      bandwidth_times:
        # Each checkout generates bandwidth. The bandwidth size depends on the total size of files created previously with the "storage" job.
        description: How many times to checkout the repo?
        default: "0"
        required: true
jobs:
  set_variables:
    runs-on: ubuntu-latest
    outputs:
      iterator_bandwidth: ${{ steps.iterator_bandwidth.outputs.iterator_bandwidth }}
      iterator_storage: ${{ steps.iterator_storage.outputs.iterator_storage }}
    steps:
      - name: Iterator for bandwidth
        id: iterator_bandwidth
        run: |
          iterator_bandwidth=$(node -e "console.log(JSON.stringify([...Array(${{ github.event.inputs.bandwidth_times }}).keys()]))")
          echo $iterator_bandwidth
          echo "iterator_bandwidth=$iterator_bandwidth" >> "$GITHUB_OUTPUT"
      - name: Iterator for storage
        id: iterator_storage
        run: |
          iterator_storage=$(node -e "console.log(JSON.stringify([...Array(${{ github.event.inputs.storage_times }}).keys()]))")
          echo $iterator_storage
          echo "iterator_storage=$iterator_storage" >> "$GITHUB_OUTPUT"
  storage:
    if: ${{ needs.set_variables.outputs.iterator_storage != '[]' && needs.set_variables.outputs.iterator_storage != '' }}  
    runs-on: ubuntu-latest
    needs:
      - set_variables   
    strategy:
      max-parallel: 1 
      matrix:
        i: ${{ fromJSON(needs.set_variables.outputs.iterator_storage) }}
    steps:
    - uses: actions/checkout@v3
    - run: |
       GIT_LFS_SKIP_SMUDGE=1 git pull        
        rnd=$((10 + $RANDOM % 300))
        size=$(expr ${{ github.event.inputs.storage }}000 + $rnd)
        echo "Generating $size Mb"
        fallocate -l ${size}Mb ${size}Mb_$(date +%s).psd        
        git config user.name pac-man
        git config user.email pac-man@github.com
        git lfs track "*.psd"
        git add .
        git commit -m "Added large file"
        result=$(git push 2>&1) || true
        echo $result
        if [[ "$result" == *"Write access to repository not granted"* ]]; then
          echo "::error ::Pac-Man is not authorized to push into the repository. Open Enterprise > Policies > Actions. Navigate to \"Workflow permissions\". Set to \"Read and write permissions\". Run Pac-Man again."
          exit 128
        fi
  bandwidth:
    if: ${{ needs.set_variables.outputs.iterator_bandwidth != '[]' && needs.set_variables.outputs.iterator_bandwidth != '' }}
    runs-on: ubuntu-latest
    needs:
      - set_variables
      - storage
    strategy:
      matrix:
        i: ${{ fromJSON(needs.set_variables.outputs.iterator_bandwidth) }}
    steps:
    - uses: actions/checkout@v3
      with:
        lfs: true
